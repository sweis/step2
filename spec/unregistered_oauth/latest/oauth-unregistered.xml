<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2008 Google Inc. -->

<!DOCTYPE rfc SYSTEM "../xml2rfc-1.33/rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="std" ipr="full3978" docName="oauth_unregistered-draft.txt">

<?xml-stylesheet type='text/xsl' href='../xml2rfc-1.33/rfc2629xlst/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc private="draft" ?>
<?rfc strict="no" ?>

  <front>
    <title abbrev="unregistered-oauth">OAuth Extension to Support Unregistered Consumers</title>
    <author initials='D.' surname="Balfanz" fullname='Dirk Balfanz (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>balfanz@google.com</email>
      </address>
    </author>
    <author initials='B.' surname="Eaton" fullname='Brian Eaton (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>beaton@google.com</email>
      </address>
    </author>
     <author initials='B.' surname="de Medeiros" fullname='Breno de Medeiros (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>breno@google.com</email>
      </address>
     </author>
    <date year='2009'/>
    <abstract>
      <t>This draft describes an optional mechanism for OAuth Providers
        to satisfy authorization requests from Consumers who
        have not registered a Consumer secret.
      </t>
    </abstract>
  </front>
  
  <middle>
    <section title="Requirements notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
        and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119"/>.
      </t>
    </section>
    
    <section title="Terminology">
      <t>This extension to the OAuth protocol uses
        the same terminology for Service Providers and Consumers as defined in
        <xref target="OAuth"/>. 
      </t>
    </section>
    
    <section title="Overview">
      <t>This extension
        describes a mechanism for Service Providers to satisfy requests from
        OAuth consumers that have not registered a consumer secret, and proposes
        a strategy to mitigate the security concerns that accepting unregistered
        consumers introduces.
      </t>
    </section>      
    <section title="Authenticating with OAuth">
      <section title="Obtaining User Authorization">
        <section title="Consumer Directs the User to the Service Provider" anchor="authorize">
          <t>This differs from Section 6.2.1 of <xref target="OAuth"/> in that
            'oauth_callback' MUST be included by the Consumer
            as part of the browser-mediated request, and 'oauth_token'
            MUST NOT be included. There is also an optional parameter
            'oauth_callback_method', which signals to the Service Provider
            whether to use GET or POST when redirecting the user back
            to the Consumer:
	    <list style="hanging">
              <t hangText='oauth_callback'>
		REQUIRED. The presence of this parameter, and the absence
		of the oauth_token parameter, signals to the Service
		Provider that the Consumer is not registered. The Service
		Provider will redirect the User back to the Consumer
		using the URL provided in this parameter.</t>
              <t hangText="oauth_callback_method">
		OPTIONAL. Values can be "get" or "post". If not specified,
		the value is assumed to be "post". This parameter
		specifies whether the Consumer would like the callback URL
		provided in the oauth_callback parameter to be invoked
		through HTTP GET or POST, with POST being the default.
	      </t>
            </list>
          </t>
        </section>

        <section title="Service Provider Authenticates the User and Obtains Consent">
          <t>The Service Provider MUST use the
            callback URL to infer the entity that the user should trust in
            the request.</t>
	  <t>It is RECOMMENDED that the Service Provider
            perform verification of the callback URL (the precise mechanism
            for doing so is left unspecified here, but see
            <xref target="security"/>) some suggestions are provided
            in the security considerations section). 
	  </t>
	  <t>If callback URL verification
            is not possible, it is RECOMMENDED that the Service Provider indicate
            to the user that there is
            a lower level of assurance about the identity of the party requesting
            authorization, differentiating these requests from those initiated
            by registered consumers.
          </t>
          <t>Apart from these considerations, the Service Provider should proceed
            as in Section 6.2.2 of <xref target="OAuth"/>.
          </t>
        </section>

        <section title="Service Provider Directs the User Back to the Consumer">
          <t>The Service Provider MUST include an
            'oauth_token' parameter. It is RECOMMENDED that
            the OAuth token have a short expiration time (i.e., several seconds
            to a few minutes).</t>
	  <t>The Service Provider SHOULD cause the
            User's user agent to use the HTTP POST method to invoke
            the callback URL provided in <xref target="authorize"/>,
            unless the Consumer specified oauth_callback_method=get in
            that step.</t>
	  <t>When redirecting the User to the Consumer's callback URL
            through an HTTP GET method, the Service Provider SHOULD
            provide the oauth_token parameter in the URL fragment, as
            opposed to the URL query component.</t>
        </section>
      </section>

      <section title="Obtaining an Access Token">
        <section title="Consumer Requests an Access Token">
          <t>The signature is computed according to
            Section 9 of <xref target="OAuth"/>. The signature scheme SHOULD
            be HMAC-SHA1, with the Consumer Key and Consumer Secret, as well as the Request Token Secret  set to the empty string.
          </t>.
        </section>
        <section title="Service Provider Grants an Access Token">
          <t>As usual.
          </t>
        </section>
      </section>
      <section title="Accessing Protected Resources">
        <t>The Consumer proceeds as in Section 7 of <xref target= "OAuth"/>,
          using an empty string as the consumer secret. 
        </t>
      </section>
    </section>

    <section title="Security Considerations" anchor="security">
      <t>We RECOMMEND using the HTTP POST method for transmitting the
	OAuth token to the Consumer because most open redirectors
	don't respond to POST requests, and therefore it is less
	likely that users will be tricked into delegating OAuth access
	to sites they don't intend to.
      </t>
      <t>If a Consumer is implemented in Javascript and wants to avoid
	the roundtrip to the server, it can specify
	oauth_callback_method=get in <xref target="authorize"/>. This
	way, the Service Provider will specify the OAuth token in the
	URL fragment. This will cause the browser to load the
	corresponding page from its cache in the common case. It has
	also the benefit of not sending the token to the server if the
	page has to be fetched from the server, as that server might
	be an open redirector.
      </t> 
    </section>
  </middle>

  <back>
    <references title='Normative References'>&rfc2119;
      
      <reference anchor="OAuth" target="http://oauth.net/core/1.0/">
        <front>
          <title abbrev="OAuth">OAuth Core 1.0</title>
          <author>
            <organization>OAuth Core Workgroup</organization>
            <address><email>spec@oauth.net</email></address>
          </author>
          <date day="4" month="December" year="2007"/>
        </front>
        <format type="HTML" target="http://oauth.net/core/1.0/"/>
       </reference>
     </references>
   </back>
 </rfc>
