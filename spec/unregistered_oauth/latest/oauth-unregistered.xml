<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2008 Google Inc. -->

<!DOCTYPE rfc SYSTEM "../xml2rfc-1.33/rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="std" ipr="full3978" docName="oauth_unregistered-draft.txt">

<?xml-stylesheet type='text/xsl' href='../xml2rfc-1.33/rfc2629xlst/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc private="draft" ?>
<?rfc strict="no" ?>

  <front>
    <title abbrev="unregistered-oauth">OAuth Extension to Support Unregistered Consumers</title>
    <author initials='D.' surname="Balfanz" fullname='Dirk Balfanz (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>balfanz@google.com</email>
      </address>
    </author>
    <author initials='B.' surname="Eaton" fullname='Brian Eaton (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>beaton@google.com</email>
      </address>
    </author>
     <author initials='B.' surname="de Medeiros" fullname='Breno de Medeiros (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>breno@google.com</email>
      </address>
     </author>
    <date year='2009'/>
    <abstract>
      <t>This draft describes an optional mechanism for OAuth Providers
        to satisfy authorization requests from Consumers who
        have not registered a Consumer secret.
      </t>
    </abstract>
  </front>
  
  <middle>
    <section title="Requirements notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
        and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119"/>.
      </t>
    </section>
    
    <section title="Terminology">
      <t>This extension to the OAuth protocol uses
        the same terminology for Service Providers and Consumers as defined in
        <xref target="OAuth"/>. The following term is herein defined:
        <list style="hanging">
          <t hangText="Consumer Key Registration">
            The out-of-band process by which Service Providers and Consumers
            exchange the cryptographic keys called 'consumer secrets' used
            in the OAuth protocol.
          </t>
        </list>
      </t>
    </section>
    
    <section title="Overview">
      <t>This extension
        describes a mechanism for Service Providers to satisfy requests from
        OAuth consumers that have not registered a consumer secret, and proposes
        a strategy to mitigate the security concerns that accepting unregistered
        consumers introduces.
      </t>
      <t>The organization of this spec follows the layout of Section 6 of
        <xref target="OAuth"/>, with the same section and
        subsection title headers. Each heading indicates only the differences
        of additions to each step that this extension requires.
      </t>
    </section>  
    
    <section title="Authenticating with OAuth">
      <section title="Obtaining an Unauthorized Request Token">
        <section anchor="RequestToken" title="Consumer Obtains a Request Token">
          <t>The Consumer follows the steps outlined in Section 6.1.1 of
            <xref target="OAuth"/>, with the following restrictions:
            <list style="hanging">
              <t hangText="oauth_consumer_key">
                The value SHOULD be the empty string.
              </t>
              <t hangText="oauth_signature_method">
                The value SHOULD be "HMAC-SHA1"
              </t>
              <t hangText="oauth_signature">
                The value MUST be the one computed according to
                Section 9 (Signing Requests), where the consumer secret
                is taken to be the empty string.
              </t>
            </list>
          </t>
        </section>
        <section title="Service Provider Issues an Unauthorized Request Token">
          <t>Unchanged from the regular OAuth spec.
          </t>
        </section>
      </section>
      <section title="Obtaining User Authorization">
        <section title="Consumer Directs the User to the Service Provider">
          <t>This differs from Section 6.2.1 of <xref target="OAuth"/> in that
            both 'oauth_token' and 'oauth_callback' MUST be included by the Consumer
            as part of the browser-mediated request.
          </t>
        </section>
        <section title="Service Provider Authenticates the User and Obtains Consent">
          <t>The Service Provider MUST use the
            callback URL to infer the entity that the user should trust in
            the request, and the Service Provider SHOULD NOT prompt the user for
            authorization if the callback URL is missing or is not a valid
            HTTP or HTTPS URL schema. It is RECOMMENDED that the Service Provider
            either perform verification of the callback URL (the precise mechanism
            for doing so is left unspecified here, but some suggestions are provided
            in the security considerations section). If callback URL verification
            is not possible, it is RECOMMENDED that the Service Provider indicate
            to the user that there is
            a lower level of assurance about the identity of the party requesting
            authorization, differentiating these requests from those initiated
            by registered consumers.
          </t>
          <t>Apart from these considerations, the Service Provider should proceed
            as in Section 6.2.2 of <xref target="OAuth"/>.
          </t>
        </section>
        <section title="Service Provider Directs the User Back to the Consumer">
          <t>In addition to 'oauth_token', the service provider MUST include an
            'oauth_cb_token' parameter, referred to as
            the "OAuth Callback Token". It is RECOMMENDED that
            the callback token have a short expiration time (i.e., several seconds
            to a few minutes).
          </t>
        </section>
      </section>
      <section title="Obtaining an Access Token">
        <section title="Consumer Requests an Access Token">
          <t>In addition to the parameters listed in section 6.3.1, the following
            MUST be included as an additional parameter in the request:
            <list style="hanging">
              <t hangText='oauth_cb_token'>
                The value received from the Service Provider.
              </t>
            </list>
          </t>
          <t>The signature is computed according to
            Section 9 of <xref target="OAuth"/>. The signature scheme SHOULD
            be HMAC-SHA1, with the Consumer Secret set to the empty string, as
            described above in <xref target="RequestToken"/>.
          </t>.
        </section>
        <section title="Service Provider Grants an Access Token">
          <t>In addition to performing the verification steps in Section 6.3.2 of
            <xref target="OAuth"/>, the Service Provider SHOULD ensure that:
            <list style='symbols'>
              <t>The 'oauth_cb_token' is included and has never been exchanged for
                an access token.
              </t>
              <t>The 'oauth_cb_token' was issued in connection with the authorization
                of the same 'oauth_token' included in the request.
              </t>
            </list>
            If all verification tests pass, the Service Provider SHOULD issue the
            'oauth_token' and 'oauth_token_secret'
            as per <xref target="OAuth"/>.
          </t>
        </section>
      </section>
      <section title="Accessing Protected Resources">
        <t>The Consumer proceeds as in Section 7 of <xref target= "OAuth"/>,
          using an empty string as the consumer secret. 
        </t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>In order to have better assurance that the request from an unregistered
        consumer is legitimate, the service provider should attempt to perform
        some validation of the callback URL. In particular, if the callback URL
        contains query parameters it may be exploiting an open redirector on
        a reputable site. Simply displaying the full callback URL to the user is
        generally not sufficient, as most users cannot make informed decisions
        with this data. In the following, some alternatives are described that
        will allow service providers to acquire greater confidence in the
        source of the requests.
        <list style='symbols'>
          <t>Service providers may limit the format of callback URLs, for instance
            by constraining the form of query parameters that may be present. The
            'tame' query parameters may then be safely omitted from the UI when
            requesting authorization. This reduces the risk of confusing users
            about the origin of requests. However this approach requires unregistered
            consumers to be made aware of these restrictions and perhaps to implement
            special logic to handle the service provider.
          </t>
          <t>If the OAuth request is sent together with an OpenID authorization
            request, as in
            the OpenID OAuth extension <xref target="OpenIDOAuth"/>, and the
            service provider performs callback URL verification via the OpenID
            realm verification mechanism, the provider can be assured with a
            good degree of confidence about the origin of the requests, and
            may use only the shorter OpenID realm URL for UI purposes in
            requesting user authentication.
          </t>
        </list>
      </t> 
    </section>
  </middle>

  <back>
    <references title='Normative References'>&rfc2119;
      
      <reference anchor="OAuth" target="http://oauth.net/core/1.0/">
        <front>
          <title abbrev="OAuth">OAuth Core 1.0</title>
          <author>
            <organization>OAuth Core Workgroup</organization>
            <address><email>spec@oauth.net</email></address>
          </author>
          <date day="4" month="December" year="2007"/>
        </front>
        <format type="HTML" target="http://oauth.net/core/1.0/"/>
       </reference>
       <reference anchor="OpenIDOAuth" target="http://breno.demedeiros.googlepages.com/openidoauth.html">
         <front>
           <title>OpenID OAuth Extension</title>
           <author initials='D.' surname="Balfanz" fullname='Dirk Balfanz (editor)'>
             <organization abbrev='Google'>Google, Inc.</organization>
             <address>
               <email>balfanz@google.com</email>
             </address>
           </author>
           <author initials='B.' surname="de Medeiros" fullname='Breno de Medeiros (editor)'>
             <organization abbrev='Google'>Google, Inc.</organization>
             <address>
               <email>breno@google.com</email>
             </address>
           </author>
           <author initials='D.' surname="Recordon" fullname='David Recordon (editor)'>
             <organization abbrev='Six Apart'>Six Apart, Ltd.</organization>
             <address>
               <email>david@sixapart.com</email>
             </address>
           </author>
           <author initials='J.' surname="Smarr" fullname='Joseph Smarr (editor)'>
             <organization abbrev='Plaxo'>Plaxo, Inc.</organization>
             <address>
               <email>joseph@plaxo.com</email>
             </address>
           </author>
           <date year='2009'/>
         </front>
         <format type="HTML" target="http://breno.demedeiros.googlepages.com/openidoauth.html"/>
         <!--<format type="TXT" target="http://openid.net/specs/ext/oauth/1.0/oauth.txt"/>-->
      </reference>
     </references>
   </back>
 </rfc>
