<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2008 Google Inc. -->

<!DOCTYPE rfc SYSTEM "../xml2rfc-1.33/rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="std" ipr="full3978" docName="oauth_unregistered-draft.txt">

<?xml-stylesheet type='text/xsl' href='../xml2rfc-1.33/rfc2629xlst/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc private="draft" ?>
<?rfc strict="no" ?>

  <front>
    <title abbrev="unregistered-oauth">OAuth Extension to Support Unregistered Consumers</title>
    <author initials='D.' surname="Balfanz" fullname='Dirk Balfanz (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>balfanz@google.com</email>
      </address>
    </author>
    <author initials='B.' surname="Eaton" fullname='Brian Eaton (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>beaton@google.com</email>
      </address>
    </author>
     <author initials='B.' surname="de Medeiros" fullname='Breno de Medeiros (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>breno@google.com</email>
      </address>
     </author>
    <date year='2009'/>
    <abstract>
      <t>This draft describes an optional mechanism for OAuth Providers
        to satisfy authorization requests from Consumers who
        have not registered a Consumer secret.
      </t>
    </abstract>
  </front>
  
  <middle>
    <section title="Requirements notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
        and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119"/>.
      </t>
    </section>
    
    <section title="Terminology">
      <t>This extension to the OAuth protocol uses
        the same terminology for Service Providers and Consumers as defined in
        <xref target="OAuth"/>. 
      </t>
    </section>
    
    <section title="Overview">
      <t>This extension
        describes a mechanism for Service Providers to satisfy requests from
        OAuth consumers that have not registered a consumer secret, and proposes
        a strategy to mitigate the security concerns that accepting unregistered
        consumers introduces.
      </t>
    </section>      
    <section title="Authenticating with OAuth">
      <section title="Obtaining User Authorization">
        <section title="Consumer Directs the User to the Service Provider">
          <t>This differs from Section 6.2.1 of <xref target="OAuth"/> in that
            'oauth_callback' MUST be included by the Consumer
            as part of the browser-mediated request, and 'oauth_token'
            MUST NOT be included. 
          </t>
        </section>
        <section title="Service Provider Authenticates the User and Obtains Consent">
          <t>The Service Provider MUST use the
            callback URL to infer the entity that the user should trust in
            the request.</t>
	  <t>It is RECOMMENDED that the Service Provider
            perform verification of the callback URL (the precise mechanism
            for doing so is left unspecified here, but see
            <xref target="security"/>) some suggestions are provided
            in the security considerations section). 
	  </t>
	  <t>If callback URL verification
            is not possible, it is RECOMMENDED that the Service Provider indicate
            to the user that there is
            a lower level of assurance about the identity of the party requesting
            authorization, differentiating these requests from those initiated
            by registered consumers.
          </t>
          <t>Apart from these considerations, the Service Provider should proceed
            as in Section 6.2.2 of <xref target="OAuth"/>.
          </t>
        </section>
        <section title="Service Provider Directs the User Back to the Consumer">
          <t>The service provider MUST include an
            'oauth_token' parameter. It is RECOMMENDED that
            the OAuth token have a short expiration time (i.e., several seconds
            to a few minutes).
          </t>
        </section>
      </section>
      <section title="Obtaining an Access Token">
        <section title="Consumer Requests an Access Token">
          <t>The signature is computed according to
            Section 9 of <xref target="OAuth"/>. The signature scheme SHOULD
            be HMAC-SHA1, with the Consumer Key and Consumer Secret, as well as the Request Token Secret  set to the empty string.
          </t>.
        </section>
        <section title="Service Provider Grants an Access Token">
          <t>As usual.
          </t>
        </section>
      </section>
      <section title="Accessing Protected Resources">
        <t>The Consumer proceeds as in Section 7 of <xref target= "OAuth"/>,
          using an empty string as the consumer secret. 
        </t>
      </section>
    </section>

    <section title="Security Considerations" anchor="security">
      <t>In order to have better assurance that the request from an unregistered
        consumer is legitimate, the service provider should attempt to perform
        some validation of the callback URL. In particular, if the callback URL
        contains query parameters it may be exploiting an open redirector on
        a reputable site. Simply displaying the full callback URL to the user is
        generally not sufficient, as most users cannot make informed decisions
        with this data. In the following, some alternatives are described that
        will allow service providers to acquire greater confidence in the
        source of the requests.
        <list style='symbols'>
          <t>Service providers SHOULD limit the format of callback URLs, for instance
            by rejecting callback URLs containing query parameters
            without the "oauth" prefix.
          </t>
	  <t>
            Service providers SHOULD also limit the acceptable URI
            schemes in callback URLs, for example by rejecting
            javascript: URI schemes. Many mobile applications register
            URI schemes as callbacks to particular applications;
            Service Providers may therefore decide to blacklist,
            rather than whitelist, URI schemes.
          </t>
          <t>If the OAuth request is sent together with an OpenID authorization
            request, as in
            the OpenID OAuth extension <xref target="OpenIDOAuth"/>, and the
            service provider performs callback URL verification via the OpenID
            realm verification mechanism, the provider can be assured with a
            good degree of confidence about the origin of the requests, and
            may use only the shorter OpenID realm URL for UI purposes in
            requesting user authentication.
          </t>
        </list>
      </t> 
    </section>
  </middle>

  <back>
    <references title='Normative References'>&rfc2119;
      
      <reference anchor="OAuth" target="http://oauth.net/core/1.0/">
        <front>
          <title abbrev="OAuth">OAuth Core 1.0</title>
          <author>
            <organization>OAuth Core Workgroup</organization>
            <address><email>spec@oauth.net</email></address>
          </author>
          <date day="4" month="December" year="2007"/>
        </front>
        <format type="HTML" target="http://oauth.net/core/1.0/"/>
       </reference>
       <reference anchor="OpenIDOAuth" target="http://breno.demedeiros.googlepages.com/openidoauth.html">
         <front>
           <title>OpenID OAuth Extension</title>
           <author initials='D.' surname="Balfanz" fullname='Dirk Balfanz (editor)'>
             <organization abbrev='Google'>Google, Inc.</organization>
             <address>
               <email>balfanz@google.com</email>
             </address>
           </author>
           <author initials='B.' surname="de Medeiros" fullname='Breno de Medeiros (editor)'>
             <organization abbrev='Google'>Google, Inc.</organization>
             <address>
               <email>breno@google.com</email>
             </address>
           </author>
           <author initials='D.' surname="Recordon" fullname='David Recordon (editor)'>
             <organization abbrev='Six Apart'>Six Apart, Ltd.</organization>
             <address>
               <email>david@sixapart.com</email>
             </address>
           </author>
           <author initials='J.' surname="Smarr" fullname='Joseph Smarr (editor)'>
             <organization abbrev='Plaxo'>Plaxo, Inc.</organization>
             <address>
               <email>joseph@plaxo.com</email>
             </address>
           </author>
           <date year='2009'/>
         </front>
         <format type="HTML" target="http://breno.demedeiros.googlepages.com/openidoauth.html"/>
         <!--<format type="TXT" target="http://openid.net/specs/ext/oauth/1.0/oauth.txt"/>-->
      </reference>
     </references>
   </back>
 </rfc>
