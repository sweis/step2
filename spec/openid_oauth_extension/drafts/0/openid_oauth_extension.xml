<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "../xml2rfc-1.33/rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="std" ipr="full3978" docName="openid+oauth-draft.txt">

<?xml-stylesheet type='text/xsl' href='../xml2rfc-1.33/rfc2629xlst/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc private="draft" ?>
<?rfc strict="yes" ?>

  <front>
    <title>OpenID OAuth Extension</title>
    <author initials='D.' surname="Balfanz" fullname='Dirk Balfanz (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>balfanz@google.com</email>
      </address>
    </author>
    <author initials='B.' surname="de Medeiros" fullname='Breno de Medeiros (editor)'>
      <organization abbrev='Google'>Google, Inc.</organization>
      <address>
        <email>breno@google.com</email>
      </address>
    </author>
      <author initials='D.' surname="Recordon" fullname='David Recordon (editor)'>
      <organization abbrev='Six Apart'>Six Apart, Ltd.</organization>
      <address>
        <email>david@sixapart.com</email>
      </address>
    </author>
    <author initials='J.' surname="Smarr" fullname='Joseph Smarr (editor)'>
      <organization abbrev='Plaxo'>Plaxo, Inc.</organization>
      <address>
        <email>joseph@plaxo.com</email>
      </address>
    </author>
    <date year='2008'/>
    <abstract>
      <t>This draft describe a mechanism to combine an OpenID 
        authentication request with the approval of an OAuth request token.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Requirements notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
        and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119"/>.
      </t>
    </section>

    <section title="Terminology">
      <t>Terms <spanx>emphasized</spanx> are pre-defined in either the
        <xref target="OpenID"/>
        or the <xref target="OAuth"/> specifications.
        <list style="hanging">
          <t hangText="Combined Consumer:">
            A web service that is simultaneously an OpenID
            <spanx style="emph">Relying Party (RP)</spanx> and
            an OAuth <spanx>Consumer.</spanx>
          </t>
          <t hangText="Combined Provider:">A web service that is simultaneously
            an OpenID <spanx style="emph">Identity Provider (OP)</spanx> and
            an OAuth <spanx style="emph">Service Provider (SP).</spanx>
          </t>
        </list>
      </t>
    </section>

    <section title ="Overview"> 
      <t>The OpenID OAuth Extension describes how to make
        the OpenID Authentication and
        OAuth Core specifications work well together. In its current form,
        it addresses the use case where the OpenID Provider and
        OAuth Service Provider are the same service. To provide
        good user experience, it is important to present a
        combined authentication and authorization screen
        for the two protocols.
      </t>
      <t>This extension describes how to embed an OAuth approval request into
       an OpenID authentication request to permit combined user approval.
       For security reasons, the OAuth access token is not returned in the URL.
       Instead a mechanism to obtain the access token is provided.
     </t>
     <t>The specific mechanisms proposed are extensions to the
       OpenID authentication request and response, and also to the assertion
       verification mechanism, found in Sections 9, 10, and 11
       of <xref target="OpenID"/>.
     </t>
   </section>

    <section title="Before Requesting Authentication">
      <t>The Combined Consumer must, prior to issuing an OpenID authentication
        request, have obtained an unauthorized OAuth request token
        (Section 6.1 of <xref target="OAuth"/>). It must also have performed
        OpenID discovery and
        (optionally) created an association with the OP as indicated
        in the preamble to Section 9 of <xref target="OpenID" />.
      </t>
    </section>

    <section anchor='AuthReq' title="Requesting Authentication">
      <t>When Requesting OpenID Authentication via the protocol mode
        "checkid_setup" or "checkid_immediate", this extension
        can be used to request that the end user
        authorize an OAuth token at the same time as their OpenID authorization.
        This is done by sending the following parameters as part of
        the OpenID request.
        <list style="hanging">
          <t hangText='openid.ns.oauth'>
            REQUIRED. Value: "http://specs.openid.net/extensions/oauth/1.0".</t>
          <t hangText="openid.oauth.req_token">
            REQUIRED. Value: The OAuth Unauthorized Request token the Consumer
            wishes the end user to authorize. </t>
        </list>
      </t>
    </section>

    <section title="Responding to Authentication Requests">
      <t>If the OpenID authentication request cannot be fulfilled (either in
        failure mode "setup_needed" or "cancel" as in Sections 10.2.1 and 10.2.2
        of <xref target="OpenID"/>) then the OAuth request SHOULD be considered
        to fail and the Provider MUST NOT send any OAuth extension values in the
        response.
      </t> 
      <t>The remainder of this section specifies how to handle the OAuth
        request in cases when the OpenID authentication response is a positive 
        assertion (Section 10.1 of <xref target="OpenID"/>).
      </t>
      <t>If the request parameter "openid.oauth.req_token" is present and is
        a valid Unauthorized Request Token, the Combined Provider
        SHOULD determine that an authorized end user wishes to complete
        the OAuth Authorization.
      </t>
      <t>If the end user does wish to grant access to the Consumer,
        the Combined Provider MUST include and MUST sign
        the following parameters.
        <list style="hanging">
          <t hangText='openid.ns.oauth'>
            REQUIRED. Identical value as defined in <xref target='AuthReq' />.
          </t>
          <t hangText='openid.oauth.req_token'>
            REQUIRED. The value included in the request.
          </t>  
          <t hangText='openid.oauth.cb_token'>
            OPTIONAL. The callback token MUST be included
            in the response if the Provider supports
            the 'Unregistered Consumer' extension to OAuth,
            (see <xref target="UnregisteredOAuth"/>), and the Consumer
            is unregistered, as defined in that extension.
            Callback tokens are needed by an unregistered Combined Consumer to
            obtain an OAuth access token.
          </t> 
        </list>
        To note that the OAuth Authorization was declined or not valid, 
        the Combined Provider SHALL only respond with the parameter
        "openid.ns.oauth".
      </t>
    </section>

    <section anchor="AuthTokenReq" title="Requesting the Access Token">
      <t>To exchange the request token for an access token,
        the Combined Consumer
        follows Section 6.3 of <xref target="OAuth"/>, or Section x.x of 
        <xref target="UnregisteredOAuth"/>, whichever is appropriate.
        However, if the Combined Consumer cannot itself verify the signature
        in the authentication response, it MAY use the following optimization.
      </t>
      <section title ="Optimized Access Token Request for Non-Associated RPs">
        <t>If the Combined Consumer cannot itself verify the signature in the
          authentication response, it MUST 
          construct a direct verification request, according
          to section 11.4.2.1 of <xref target="OpenID"/>, including all
          openid.* parameters that appeared in the response. 
          The RP sends the OAuth access token request
          parameters (section 6.3.1 of <xref target="OAuth"/>) either in the
          HTTP Authorization header or in the query part of the URL
          (as described in section 5.2 of the same document).
          The third mechanism defined in the Section 5.2 of
          <xref target="OAuth"/> cannot be used because the OpenID request
          POST body has an incompatible Mime-type.
        </t>
      </section>
    </section>

    <section title="Responding to Access Token Requests">
      <t>If the OpenID signature verification fails, the Combined Provider
        should not include any OAuth extension parameters in the response,
        and should proceed identically as in Section 11.4.2.2 of
        <xref target="OpenID" />.
      </t>
      <t>If the OpenID signature verification succeeds, the Provider
        verifies the
        OAuth signature, according to Section 9 of <xref target="OAuth"/>. 
      </t>
      <t>If the OAuth signature verification fails,
        the OpenID signature verification response proceeds identically
        as described in Section  11.4.2.2 of <xref target="OpenID" />.
      </t>
      <t>If the OAuth signature verification succeeds, the Provider constructs
        an OpenID signature verification response message with
        the following additional parameters:
        <list style="hanging">
          <t hangText="openid.ns.oauth">
            REQUIRED. Same value as in Section <xref target="AuthReq"/>.
          </t>
          <t hangText="openid.oauth.access_token">
            REQUIRED. The OAuth access token, encoded according to Section 5.1
            of <xref target="OAuth"/>.</t>
          <t hangText="openid.oauth.access_token_secret">
            REQUIRED. The OAuth access token secret, similarly encoded.
          </t>
        </list>
      </t>
    </section>

    <section title="General Considerations">
      <t>The proposal takes the approach to insulate each protocol
        from the other, both for backwards compatibility as
        well as to enable OpenID and OAuth to evolve and incorporate additional
        features without requiring reviews of the combined usage described here.
        In particular:
        <list style="hanging">
          <t hangText="OpenID full compatibility">The OpenID identity provider
            (OP) MAY safely announce the endpoint supporting the OAuth extension
            to all relying parties, whether or not they support
            the extension as well.
            The use of a separate service-type announcement
            for Combined Providers
            endpoints provides a mechanism for auto-discovery
            of OAuth capabilities by RPs.
          </t>
          <t hangText="OAuth token compatibility">The OAuth tokens approved
            via this mechanism MAY be used identically as tokens acquired through
            alternative mechanisms (e.g., via standard OAuth) without requiring
            special considerations either because of functionality or security
            reasons.
          </t>
        </list>
      </t>
    </section>

    <section title="Security Considerations">
      <t>This proposal composes protocols that provide
        security services (authentication in the case of OpenID,
        authorization in
        the case of OAuth) with the intention that
        the combined protocol provides
        both services simultaneously. Since security is not a property generally
        preserved by composition, the design takes the approach of encapsulating
        the OAuth flow within OpenID in a modular way, and applies the general
        rule-of-thumb of NOT introducing
        reliance on the security properties of one protocol for
        the correctness of
        the other. Ultimately, only public scrutiny and review can
        incrementally provide confidence that the approach described
        here is sound
        from a security perspective.</t>
      <t>The following security principles is reflected in this design:
        <list style="hanging">
          <t hangText="No long-term OAuth secrets hit the browser">
            The OAuth protocol was designed so that browser-mediated communication
            is not used to transfer long-term secrets or
            capabilities to access data.
            Instead, temporary approval tokens are exchanged through the browser
            and then exchanged in authenticated server-to-server calls
            for higher-value secrets and tokens. In this protocol, the use of
            callback_token preserves this feature of the OAuth protocol even with
            unregistered consumers.
          </t>
        </list>
      </t>
    </section>
  </middle>

<back>
  <references title='Normative References'>&rfc2119;
    <reference anchor="OpenID"
        target="http://openid.net/specs/openid-authentication-2_0.html">
      <front>
        <title abbrev="OpenID">OpenID Authentication 2.0 - Final</title>
        <author>
          <organization>Openid.net</organization>
          <address>
            <email>specs@openid.net</email>
          </address>
        </author>
        <date day="5" month="December" year="2007"/>
      </front>
      <format type='HTML' target="http://openid.net/specs/openid-authentication-2_0.html"/>
      <format type='TXT' target="http://openid.net/specs/openid-authentication-2_0.txt"/>
    </reference>
    <reference anchor="OAuth" target="http://oauth.net/core/1.0/">
      <front>
        <title abbrev="OAuth">OAuth Core 1.0</title>
        <author>
          <organization>OAuth Core Workgroup</organization>
          <address>
            <email>spec@oauth.net</email>
          </address>
        </author>
        <date day="4" month="December" year="2007"/>
      </front>
      <format type="HTML" target="http://oauth.net/core/1.0/"/>
    </reference>
    <reference anchor="UnregisteredOAuth" target="http://breno.demedeiros.googlepages.com/oauth-unregistered.html">
      <front>
        <title>OAuth Unregistered Consumer Extension</title>
        <author initials = "D." surname="Balfanz" fullname = "Dirk Balfanz">
          <organization>Google, Inc.</organization>
          <address>
            <email>balfanz@google.com</email>
          </address>
        </author>
        <author initials = "B." surname="Eaton" fullname = "Brian Eaton">
          <organization>Google, Inc.</organization>
          <address>
            <email>beaton@google.com</email>
          </address>
        </author>
        <author initials = "B." surname="de Medeiros" fullname = "Breno de Medeiros">
          <organization>Google, Inc.</organization>
          <address>
            <email>breno@google.com</email>
          </address>
        </author>
        <date />
      </front>
      <format type='HTML' target="http://breno.demedeiros.googlepages.com/oauth-unregistered.html"/>
    </reference>
  </references>
</back>
</rfc>